server:
  port: 8999

spring:
  application:
    name: spring-ai-llms
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: ${ORACLE_SBAB_JDBCURL}
    username: ${DB_USER}
    password: ${DB_PASS}
  liquibase:
    change-log: classpath:db/spring-ai-llms.changelog-master.yaml
    # Default context is needed for the execution of change sets without context
    contexts: default
  jpa:
    open-in-view: false
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
      WRITE_DURATIONS_AS_TIMESTAMPS: false
    default-property-inclusion: NON_EMPTY
    deserialization:
      # From tech arch common recommendation
      FAIL_ON_UNKNOWN_PROPERTIES: true
      FAIL_ON_NULL_FOR_PRIMITIVES: true
      FAIL_ON_NUMBERS_FOR_ENUMS: true
      FAIL_ON_READING_DUP_TREE_KEY: true
      FAIL_ON_TRAILING_TOKENS: true
      ACCEPT_FLOAT_AS_INT: false
    property-naming-strategy: SNAKE_CASE
    parser:
      strict-duplicate-detection: true
  #springAi params
  ai:
    openai.api-key: ${OPEN_AI_KEY:NOT_NEEDED}
    chat:
      base-url: ${OPEN_AI_BASE_URL:http://localhost:12434/engines}
      options:
        model: ${OPEN_AI_MODEL:ai/llama3.2}

app:
  toggle:
    message-type: false
  models:
    internal:
      llm-model-name: ${INTERNAL_LLM_MODEL_NAME:unknown}
      api-connection:
        url: ${INTERNAL_AI_CONNECTION_URL:http://localhost:11434}
        key: ${INTERNAL_AI_CONNECTION_KEY:NOT_NEEDED}
    external:
      llm-model-name: ${EXTERNAL_LLM_MODEL_NAME:gpt-5}
      api-connection:
        url: ${EXTERNAL_AI_CONNECTION_URL:https://api.openai.com}
        key: ${EXTERNAL_AI_CONNECTION_KEY}
    docker:
      llm-model-name: ${DOCKER_LLM_MODEL_NAME:unknown}
      api-connection:
        url: ${DOCKER_AI_CONNECTION_URL:http://localhost:12434/engines}
        key: ${DOCKER_AI_CONNECTION_KEY:NOT_NEEDED}


management:
  endpoints:
    web:
      exposure:
        include: info,prometheus,health
  info:
    env:
      enabled: true
    java:
      enabled: true
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          # This service can not work without a DB
          include: readinessState

---

spring:
  config:
    activate:
      on-profile: local-db-oracle
  datasource:
    url: jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=FREEPDB1)))
    username: CONVERSATION_LOCAL
    password: CONVERSATION_LOCAL

---

spring:
  config:
    activate:
      on-profile: local-h2
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;Mode=Oracle
    username: CONVERSATION_LOCAL
    password: CONVERSATION_LOCAL
  h2:
    console:
      enabled: true